import disnake
import asyncio
import random
from disnake.ext import commands
from datetime import datetime
from typing import Optional

bot = commands.Bot(command_prefix="!", help_command=None, intents=disnake.Intents.all(), test_guilds=[1215750949587521677])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ


CENSORED_WORDS = ["fook", "karas"]
WARN_THRESHOLD = 3
warnings = {}


# –°–æ–±—ã—Ç–∏—è


@bot.event
async def on_ready():
    print(f"Bot {bot.user} is ready to work!")

    await bot.change_presence(
        status=disnake.Status.online,
        activity=disnake.Game(name="GTA IRL")
    )


@bot.event
async def on_member_join(member):
    channel = member.guild.system_channel
    role = disnake.utils.get(member.guild.roles, id=1215791141778362500)

    embed = disnake.Embed(
        title="–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!",
        description=f"{member.name}",
        color=0xffffff
    )

    await member.add_roles(role)
    await channel.send(embed=embed)


@bot.event
async def on_message(message):
    await bot.process_commands(message)

    for content in message.content.split():
        for censored_word in CENSORED_WORDS:
            if content.lower() == censored_word:
                await message.delete()
                await message.channel.send(f"{message.author.mention} —Ç–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!",delete_after=2)

                user_id = message.author.id
                warnings[user_id] = warnings.get(user_id, 0) + 1

                if warnings[user_id] >= WARN_THRESHOLD:
                    await message.author.add_roles(disnake.utils.get(message.author.guild.roles, id=1215792832577671249))
                    mute_msg = await message.channel.send(f"{message.author.mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 1 –º–∏–Ω—É—Ç—É –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
                    await asyncio.sleep(60)
                    await message.author.remove_roles(disnake.utils.get(message.author.guild.roles, id=1215792832577671249))
                    warnings[user_id] = 0
                    await mute_msg.delete()

                break


@bot.event
async def on_command_error(ctx, error):
    print(error)

    if isinstance(error, commands.MissingPermissions):
        await ctx.send(f"{ctx.author}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!")
    elif isinstance(error, commands.UserInputError):
        await ctx.send(embed=disnake.Embed(
            description=f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: '{ctx.prefix}{ctx.command.name}' ({ctx.command.brief})\nExample: {ctx.prefix}{ctx.command.usage}"
        ))


@bot.event
async def on_raw_reaction_add(payload):
    if payload.channel_id == 1215958366648799323 and payload.message_id == 1215959244113838150:
        guild = bot.get_guild(payload.guild_id)
        member = guild.get_member(payload.user_id)

        if not member.bot:
            role_id = None

            if str(payload.emoji) == "üëä":
                role_id = 1215790416855699456

            if role_id:
                role = guild.get_role(role_id)
                await member.add_roles(role)


# –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ '!'


@bot.command(usage="kick <@user> <reason=None>")
@commands.has_permissions(kick_members=True, administrator=True)
async def kick(ctx, member: disnake.Member, *, reason="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."):
    await ctx.send(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ctx.author.mention} –∏—Å–∫–ª—é—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}", delete_after=2)
    await member.kick(reason=reason)
    await ctx.message.delete()


@bot.command(name="–±–∞–Ω", aliases=["ban"])
@commands.has_permissions(ban_members=True, administrator=True)
async def ban(ctx, member: disnake.Member, *, reason="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."):
    try:
        await ctx.send(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ctx.author.mention} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}", delete_after=2)
        await member.ban(reason=reason)
        await ctx.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@bot.command(name="—Ä–∞–∑–±–∞–Ω", aliases=["unban"])
@commands.has_permissions(ban_members=True, administrator=True)
async def unban(ctx, user: disnake.User):
    await ctx.guild.unban(user)
    await ctx.send(f"–†–∞–∑–±–∞–Ω–µ–Ω {user.mention}")


@bot.command()
async def hello(ctx):
    await ctx.send(f"Aloha, {ctx.author.mention}!")


@bot.command()
async def time(ctx):
    current_time = datetime.now().strftime("%H:%M:%S")
    await ctx.send(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")


@bot.command()
async def date(ctx):
    current_date = datetime.now().strftime("%d/%m/%Y")
    await ctx.send(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}")


@bot.command(name="squad")
async def ask_squad(ctx):
    view = Confirm()

    await ctx.send("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ Hustler University, –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã?", view=view)
    await view.wait()

    if view.value is None:
        await ctx.send("–¢—ã —É–ø—É—Å—Ç–∏–ª —Å–≤–æ–π —à–∞–Ω—Å! –ö–∞–∫–æ–π –∂–µ —Ç—ã Bottom G...")
    elif view.value:
        await ctx.send("–û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é Top G", view=LinkToSquad())
    else:
        await ctx.send("–¢—ã —É–ø—É—Å—Ç–∏–ª —Å–≤–æ–π —à–∞–Ω—Å! –ö–∞–∫–æ–π –∂–µ —Ç—ã Bottom G...")


@bot.command()
async def transport(ctx):
    await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:", view=DropDownView())


@bot.command()
async def info(ctx):
    embed = disnake.Embed(
        title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
        description="–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã.",
        color=0x3498db
    )

    embed.add_field(name="–í–µ—Ä—Å–∏—è", value="1.0")
    embed.add_field(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value="–õ–æ–≥–≤–∏–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π")
    embed.add_field(name="Github", value="[https://github.com/TheGR3A7]")

    await ctx.send(embed=embed)


@bot.command()
async def help(ctx):
    embed = disnake.Embed(
        title="–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        color=0x00ff00
    )

    embed.add_field(name="!info", value="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")
    embed.add_field(name="!hello", value="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –±–æ—Ç–∞")
    embed.add_field(name="!time", value="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    embed.add_field(name="!date", value="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã")
    embed.add_field(name="!squad", value="–í—Å—Ç—É–ø–∏—Ç—å –≤ —Å–∫–≤–∞–¥")
    embed.add_field(name="!uinfo –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    embed.add_field(name="!transport", value="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    embed.add_field(name="!rps –≤—ã–±–æ—Ä", value="–ò–≥—Ä–∞ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞")
    embed.add_field(name="/calc", value="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    embed.add_field(name="/avatar", value="–í—ã–¥–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    embed.add_field(name="/random_role", value="–í—ã–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ä–æ–ª—å")
    embed.add_field(name="/clear", value="–£–¥–∞–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π(–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)")
    embed.add_field(name="!kick", value="–ö–∏–∫–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞(–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)")
    embed.add_field(name="!ban", value="–ë–∞–Ω–∏—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞(–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)")
    embed.add_field(name="!ping", value="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –±–æ—Ç–∞(–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)")

    await ctx.send(embed=embed)


@bot.command(name="rock_paper_scissors", aliases=["rps"])
async def rock_paper_scissors(ctx, player_choice: str):
    game = RockPaperScissors()

    if player_choice.lower() not in game.choices:
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã' –∏–ª–∏ '–±—É–º–∞–≥—É'.")
        return

    bot_choice = random.choice(game.choices)
    result = game.determine_winner(player_choice.lower(), bot_choice)

    embed = disnake.Embed(
        title="–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞",
        color=0x3498db
    )
    embed.add_field(name="–í–∞—à –≤—ã–±–æ—Ä", value=player_choice.capitalize(), inline=False)
    embed.add_field(name="–í—ã–±–æ—Ä –±–æ—Ç–∞", value=bot_choice.capitalize(), inline=False)
    embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value=result, inline=False)

    await ctx.send(embed=embed)


@bot.command(name="userinfo", aliases=["uinfo"])
async def user_info(ctx, member: disnake.Member = None):
    member = member or ctx.author
    embed = disnake.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {member.display_name}", color=member.color)
    embed.set_thumbnail(url=member.avatar.url)
    embed.add_field(name="–ò–º—è", value=member.name, inline=True)
    embed.add_field(name="–ù–∏–∫–Ω–µ–π–º", value=member.nick, inline=True)
    embed.add_field(name="ID", value=member.id, inline=True)
    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=str(member.status).capitalize(), inline=True)
    embed.add_field(name="–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", value=member.joined_at.strftime("%d.%m.%Y %H:%M:%S"), inline=True)
    embed.add_field(name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞", value=member.created_at.strftime("%d.%m.%Y %H:%M:%S"), inline=True)
    embed.add_field(name="–†–æ–ª–∏", value=", ".join([role.name for role in member.roles[1:]]), inline=True)
    embed.add_field(name="–í—ã—Å—à–∞—è —Ä–æ–ª—å", value=member.top_role.name, inline=True)
    await ctx.send(embed=embed)


@bot.command(name="ping")
async def ping(ctx):
    latency = bot.latency * 1000  # –ü–∏–Ω–≥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    embed = disnake.Embed(
        title="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞",
        description=f"–ü–∏–Ω–≥ –±–æ—Ç–∞: {latency:.2f} –º—Å",
        color=0x3498db
    )
    await ctx.send(embed=embed)


# –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ '/'


@bot.slash_command(description="'+' - –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è, '-' - –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è, '*' - –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è, '/' - –¥–ª—è –¥–µ–ª–µ–Ω–∏—è")
async def calc(inter, a: int, oper: str, b: int):
    if oper == "+":
        result = a+b
    elif oper == "-":
        result = a-b
    elif oper == "*":
        result = a*b
    elif oper == "/":
        result = a/b
    else:
        result = "–ù–µ–≤–µ—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä!"

    await inter.send(str(result), delete_after=5)


@bot.slash_command(description="–í—ã–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ä–æ–ª—å")
async def random_role(inter):
    await inter.response.defer()

    guild = inter.guild
    roles_to_include = [1215961567196352522, 1215961664621379685, 1215961763091189780]

    all_roles = guild.roles

    eligible_roles = [role for role in all_roles if role.id in roles_to_include and not role.is_default()]

    if eligible_roles:
        random_role = random.choice(eligible_roles)
        member = inter.author

        await member.add_roles(random_role)
        await inter.edit_original_response(content=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ä–æ–ª—å: {random_role.mention}")
        await asyncio.sleep(2)
        await inter.delete_original_response()
    else:
        await inter.edit_original_response(content="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await asyncio.sleep(2)
        await inter.delete_original_response()


@bot.slash_command()
@commands.has_permissions(administrator=True)
async def clear(inter, amount: int):
    if not 1 <= amount <= 100:
        await inter.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100", ephemeral=True)
        return

    await inter.channel.purge(limit=amount + 1)
    await inter.response.send_message(f"–£–¥–∞–ª–µ–Ω–æ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π!", ephemeral=True)


@bot.slash_command()
async def avatar(inter, member:disnake.Member = None):
    user = member or inter.author
    embed = disnake.Embed(title="–ê–≤–∞—Ç–∞—Ä–∫–∞", color=0x2f3136)
    embed.set_image(url=user.display_avatar.url)
    await inter.response.send_message(embed=embed)


# –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–∫–≤–∞–¥


class Confirm(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=10.0)
        self.value = Optional[bool]

    @disnake.ui.button(label="Confirm", style=disnake.ButtonStyle.green, emoji="üòé")
    async def confirm(self, button: disnake.ui.Button, inter: disnake.CommandInteraction):
        await inter.response.send_message("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –∂–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        self.value = True
        self.stop()

    @disnake.ui.button(label="Cancel", style=disnake.ButtonStyle.red, emoji="üíÄ")
    async def cancel(self, button: disnake.ui.Button, inter: disnake.CommandInteraction):
        await inter.response.send_message("–†–æ–∫–æ–≤–∞—è –æ—à–∏–±–∫–∞")
        self.value = False
        self.stop()


class LinkToSquad(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(disnake.ui.Button(label="Sign the contract, BIG BOY!", url="https://github.com/TheGR3A7"))


# –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é


class DropDown(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label="Bugatti", description="–†–æ–∑–æ–≤—ã–π –±—É–≥–∞—Ç—Ç–∏", emoji="üèéÔ∏è"),
            disnake.SelectOption(label="Bicycle", description="–¢—Ä–µ—Ö–∫–æ–ª–µ—Å–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥", emoji="üö≤"),
            disnake.SelectOption(label="Plane", description="–ë–∏–∑–Ω–µ—Å-–¥–∂–µ—Ç", emoji="‚úàÔ∏è"),
            disnake.SelectOption(label="Yacht", description="–õ–∏—á–Ω–∞—è —è—Ö—Ç–∞", emoji="‚õµ")
        ]

        super().__init__(
            placeholder="Transports",
            min_values=1,
            max_values=1,
            options=options
        )

    async def callback(self, inter: disnake.MessageInteraction):
        await inter.response.send_message(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {self.values[0]}. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")


class DropDownView(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(DropDown())


class RockPaperScissors:
    def __init__(self):
        self.choices = ["–∫–∞–º–µ–Ω—å", "–±—É–º–∞–≥–∞", "–Ω–æ–∂–Ω–∏—Ü—ã"]

    def determine_winner(self, player_choice, bot_choice):
        if player_choice == bot_choice:
            return "–ù–∏—á—å—è!"
        elif (
            (player_choice == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or
            (player_choice == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å") or
            (player_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞")
        ):
            return "–¢—ã –≤—ã–∏–≥—Ä–∞–ª!"
        else:
            return "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!"


token = open('token.txt', 'r').readline()
bot.run(token)